:ruby
  # Example invocation (with optional "summarize"):
  #
  # = partial :blog_post, locals: {article: article, summarize: 300}
  #
  #      ...or include the current_page as article (in some cases):
  #
  # = partial :blog_post, locals: {article: current_page}

  author = article.data.author
  article_view = (article.url == current_page.url)
  summarize ||= summarize
  tags = article.data.tags
  tags = tags.parse_csv.map{|s| s.strip} if tags.class == String
  dates = article.data.date

  def author_data item
    data.authors[item] if defined? data.authors[item]
  end


- if article_view
  :ruby
    transport = data.site.ssl ? "https://" : "http://"

    twitter_name = author_data 'twitter'

    article_summary = article.data.summary || Nokogiri::HTML(article.summary(200)).text.strip

    open_graph = {
      "og:type" => "article",
      "og:title" => article.title,
      "og:description" => article_summary,
      "og:url" => "#{transport}#{data.site.domain}#{article.url}",
      "article:published_time" => article.date.iso8601,
      "article:author:username" => author
    }

    social_sites = {
      twitter: "https://twitter.com/",
      googleplus: "https://twitter.com/+",
      facebook: "https://facebook.com/",
    }

    twitter_card = {
      "twitter:card" => "summary",
      "twitter:site" => data.site.twitter ? "@#{data.site.twitter}" : nil,
      "twitter:creator" => twitter_name ? "@#{twitter_name}" : nil,
      "twitter:title" => article.title,
      "twitter:description" => article_summary,
      #"twitter:image:src" => "",
      #"twitter:domain" => ""
    }

  - content_for :head do
    %link(href="/blog/feed.xml" rel="alternate" title="Atom feed" type="application/atom+xml")

    / Open Graph (FB / G+)
    - open_graph.each do |property, content|
      %meta{property: property, content: content}

    - social_sites.each do |site, link|
      - if author_data site
        %meta{property: "article:author", content: "#{link}#{author_data site}"}

    - if tags
      - tags.sort {|a,b| a.downcase <=> b.downcase}.each do |tag|
        %meta{property: "article:tag", content: tag}
        %link(href="/blog/tag/#{tag.downcase}.xml" rel="alternate" title="Atom feed" type="application/atom+xml")


    / Twitter card
    - twitter_card.each do |name, content|
      - if content
        %meta{name: name, content: content}


%article.post.hentry

  %header.post-header

    %h2.post-title.entry-title
      - if (defined? article.url) && article.url != current_page.url
        = link_to article.title, article.url
      - else
        = article.title

    %header.post-meta
      - if article.data.author
        .blogger_avatar
          %img(src="/blogger_avatars/#{author}.png")


        %span.byline
          by
          %span.author.vcard
            = author_link article.data.author
          &ndash;

      %time.published{datetime: article.date.iso8601}
        = pretty_date article.date

      - if defined? article.data.summary
        .entry-summary.hidden= markdown_to_html article.data.summary

  %section.post-content.entry-content
    - summary = article.summary summarize

    - if article_view
      = demote_headings article.body

    - else
      = demote_headings summary

      - case
        - when article.body == summary && data.site.has_comments
          = link_to "Add a comment &raquo;", "#{article.url}#blog-comments", class: "more-link add-comment"
        - when article.body == summary && !data.site.has_comments
          = link_to "View article &raquo;", article.url, class: "more-link view-article"
        - when article.body != summary
          = link_to "Read More &raquo;", article.url, class: "more-link read-more"


  %footer.post-meta
    - if tags
      .tags
        Tags:

        %ul.taglist
        - tags.sort {|a,b| a.downcase <=> b.downcase}.each do |tag|
          %li= link_to tag, tag_path(tag)

    - if article_view && author_card(author)

      #author-info.author-info

        %h2
          About
          = author_name author

        - if author_photo author
          .author-photo= author_photo author
          - with_photo = true

        .author-blurb{class: with_photo ? 'with-photo' : ''}
          = author_card author
          .more-link
            = author_link(author, "View all posts by #{author_name author} &raquo;")

    -# Share
