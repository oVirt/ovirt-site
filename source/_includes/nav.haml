-# If source isn't specified in locals, then default to "navigation"
-#
-# Example for custom source:
-#
-#   = partial :nav, locals: { source: "navigation" }
-#

- source ||= "navigation"


-# Navigation is automatically rendered from ../../data/{source}.yml
-# There is support for one-level depth.
-# Top level items should start with a "-"; second-level should be indented.
-#
-# Exmaple:
-#
-# - Foo: "foo_link"
-# - Bar: "optional_fallback_link_for_nojavascript"
-#   Baz: "baz_link"
-#   Baz2: "baz2_link"
-#
-# Foo is a normal link.
-# Bar is a dropdown title (with an optional link â€” it can be empty), as it has children
-# Baz and Baz2 are children links to Bar.

:plain
  <nav id="mainNav" class="navbar-fixed-top affix-top navForMobileHack" style="font-family: 'Open Sans', sans-serif; display: flex; justify-content: center;">
        <a href="/"><img id="logo" style="float: left; margin-right: 70px; height: 40px; padding: 0; margin-top: 12px;" alt="oVirt" src="{{ site['logo'] }}"></a>
        <div>
            <div class="navbar-header page-scroll" style="min-width: 170px">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#menu_id0980fddf">
                    <span class="sr-only">Toggle navigation</span> Menu <i class="fa fa-bars"></i>
                </button>
            </div>

            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="menu_id0980fddf">

                <ul class="nav navbar-nav">
                    <li class="hidden active">
                        <a href="#page-wrap"></a>
                    </li>

:ruby

  def nav_header text
    capture_haml do
      haml_tag "li.disabled" do
        haml_tag :h4, text
      end
    end
  end


  def nav_link text, link, active, &block
    return if text.empty? && link.empty?

    # If there's no link, call nav_header instead
    return nav_header(text) if link.nil?

    # Set the active class, if applicable
    active_class = active ? '.active' : ''

    # If the title wasn't specified in YAML, use the filename
    text = link.split('/').last.humanize if (text.empty? || text == "-")

    # Make a class baed on the link's name
    name_class = ""

    capture_haml do
      haml_tag "li" + active_class + name_class, role: "menuitem" do
        haml_tag :a, text, { href: link || '#' }
        #block.call if defined? block
      end
    end
  end

  if site.data.has_key?(source) && site.data[source]
    active_link = '/'
    site.data[source].each do |item|
      next if item.is_a?(String)
      item.each do |text, link|
        if page.url.start_with?(link) and link.size > active_link.size
          active_link = link
        end
      end
    end
  end


- if site.data.has_key?(source) && site.data[source]

  - site.data[source].each do |item|

    - if item.is_a?(String)

      = nav_header item

    - else

      - item.each do |text, link|

        - if item.count == 1

          - if link
            = nav_link text, link, active_link == link

          - else
            = nav_header text

        - else

          = nav_link text, link, active_link == link do

            %ul.nav(role="menu")
              - item.each do |text, link|
                - unless text == text
                  = nav_link text, link, active_link == link

:plain
                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>

